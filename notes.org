* wishlist of commands/tweaks
** auto-save non-file buffers to location
   :PROPERTIES:
   :ID:       826289ff-b660-4eb8-b1dc-e072d762279e
   :END:
** Tex mode that can navigate by equation number/label (in aux file)
   :PROPERTIES:
   :ID:       7330ebbc-ee0c-437a-a7f0-eb106b314b1e
   :END:
** Swap insert-register so that the non-prefix puts point after, prefix before
   :PROPERTIES:
   :ID:       8e5f6ab1-7bca-4aab-b6fd-993beddc5af2
   :END:
** zap-to-char-reverse
   :PROPERTIES:
   :ID:       fd075d2f-0a3d-4fa3-928a-4877b08d5e19
   :END:
** some nicer collapsing fn that collapses current level and below for org-mode
** Agenda commands with deadlines
   :PROPERTIES:
   :ID:       fd55d581-c583-429c-8cf5-74282f6c94cf
   :END:
   C-a p a shows all TODO under a TODO, unlike C-a t
   Some mix of deadlines, priorities, etc
* Things to learn and install
** Emacs saving macros and editting their bindings easily without .emacs
buffer-local macros maybe? like a different kind of yasnippet effect?
** CEDET?
   Speedbar at least, seems CEDET might require a lot of hacking to worth with go projects
   https://www.emacswiki.org/emacs/EmacsCodeBrowser
   Does etags support go? If so, might be easy
** Abbrevs
*** https://www.gnu.org/software/emacs/manual/html_node/emacs/Abbrevs.html#Abbrevs
*** Make a global keybinding for define-global-abbrev
*** C-x a g : define abbrev expanding into words before point
*** C-x a l : just for the current major-mode
*** M-/ : dynamic abbrev = search for a completion
*** why when I abbrev-prefix-mark is there a newline inserted
    :PROPERTIES:
    :ID:       2a068b48-a358-4a11-af66-ea5f7fe05017
    :END:
** https://github.com/davidhalter/jedi and associated modes?
* Things I want to incorporate into workflows in the future
** Projectile mode - project utilities like search-project - https://github.com/bbatsov/projectile
** Keys from prelude-mode - see prelude-global-keybindings.el
** Helm - fancy autocomplete/searching - maybe not right away
** Crux... seems like it does a bunch of random different stuff
* completion frameworks
Helm, Ivy, Ido
https://sam217pa.github.io/2016/09/13/from-helm-to-ivy/
https://www.reddit.com/r/emacs/comments/7vcrwo/helm_vs_ivy_what_are_the_differences_what_are_the/
* Something -- probably smartparens -- is messing up deleting parens
eg given [abc] it won't let me delete the parens with backspace
* I think I want towards disabling requiring prelude-global-keybindings
It's required in init.el, and it makes life much harder if i want to disagree with the keybinds without modifying prelude's stuff
* well-known config files for reference
https://www.emacswiki.org/emacs/CategoryDotEmacs
 https://www.emacswiki.org/emacs/ExampleConfigurations
 https://github.com/purcell/emacs.d
 http://pages.sachachua.com/.emacs.d/Sacha.html
* navigation vs searching vs etc
I have swiper for searching in buffer, which can ALSO be used for navigation
  then avy can be used for navigation, but only for things for that are visible... so maybe that's not worth it? but it can also switch windows
  yeah I don't like avy

anzu is like a super lightweight isearch improvement, much less than swiper

So if I'm navigating onscreen (moving point to somewhere visible)
   then I'm not even looking at the minibuffer, in fact that's not useful
   and the fact that navigating FROM the bottom of the window with ivy moves around, is real bad
   but I still like ivy's highlighting, navigating matches with C-n/C-p, and restricting

If I'm searching... I think I want to break this down more, and understand the use cases
* It would be nice to have a keybinding for swiper to change to searching in another buffer
   i.e. I start searching and realize I'm in the wrong buffer
* Company mode config
perhaps move it to prog-mode-hook? since I don't think I want it in org mode
look into backends, maybe if there's an aspell-ish backend that WOULD be good for org
* Grep
** unbind counsel-git-grep C-c j
** add git-grep to projectile's project search -- maybe? if its builtin grep isn't good enough? or just use rg?
** projectile also has a (customizable) option (projectile-use-git-grep) for using uh, git grep
* Why is flycheck giving me a squiggle for (setq projectile-mode-line-function ...)?
* I feel like the undo tracking system batches things in bigger batches, not sure if I like it
* What does ivy-mode do that isn't being done by the config?
`C-h f ivy-mode` gives a lot of information about this
* Questions or decisions
** Which modes do I want to diminish?
** delight instead of diminish? seems like an improvement
** does which-function-mode works in org-mode reasonably?
** use-package?
 https://github.com/jwiegley/use-package
** Do I like ctrl-backspace for kill-line-backwards and indent ... maybe that's okay!
** Do I want to use hippie-expand for anything, or just put company-complete on that during modes
** smex vs counsel M-x
** anzu for refactoring - anzu-replace-at-cursor-thing
** (setq tab-always-indent 'complete) -- is that good?
* easy things to do
** Install CGH as a prelude-search-engine
** recover my paren settings from work laptop
** remap query-replace, query-replace-regex with, at minimum, anzu
* All prelude packages
** super-save
*** description
Saves buffers when they lose focus, or when idle
Exactly which things trigger the save is customizable
*** verdict
Keep! Requires no thought to use, no keys to bind, and just makes things a little nicer
** projectile
** company
** flyspell
** flycheck
** whitespace
*** description
Cleans up bad or highlights whitespace - exactly what constitutes is customizable.
 For example, trailing whitespace on lines, trailing empty lines in files, mixes of tabs and spaces, etc
*** Verdict
Keep! Requires no thought to use, no keys to bind, and just makes things a little nicer
** auto-revert-mode
when a visited file changes on disk, automatically revert the buffer it's in
** Beacon
** Ivy, counsel, swiper
Ivy is a completion backend based on the minibuffer. It can be used for things like find-file or isearch -- those are the kinds of things counsel and swiper do - they are ivy frontends.
** Ido-related-things
** save-place
** smartparens
** which-function
** winner
** undo-tree
** [and more]
** anzu
** swiper
* philosophy
There's things that are just more powerful but mostly drop-in replacements -- usually things that require minimal relearning or learning something different from std Emacs. Example: replacements for find-file or M-x, whitespace, ido, supersave

There's powerful flexible tools like magit or projectile mode that you have to learn what they do, but its mostly different than what Emac usually does

Then there's modes that replace part of Emacs but do things in a different way, like changing how you navigate your files and buffers. These ones are the trickiest to include!
